name: Deploy Release
on:
  push:
    branches:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
env:
  CI: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        go-version: [ '1.21' ]
        node-version: [ 18 ]
        goarch: [ 'amd64', 'arm64' ]  # Define architectures here
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      - name: Build
        working-directory: frontend
        run: npm run build
      - name: Install dependencies
        working-directory: backend
        run: go get ./...
      - name: Build
        working-directory: backend
        run: |
          GOOS=linux GOARCH=${{ matrix.goarch }} go build -o build/kubevoyage-${{ matrix.goarch }} ./cmd/kubevoyage
      #- name: Test with the Go CLI
      #  run: go test
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-artifacts-${{matrix.goarch}}
          path: |
            backend/
            frontend/public

    build-docker:
      needs: build
      runs-on: ubuntu-latest
      strategy:
        matrix:
          goarch: [ 'amd64', 'arm64' ]  # Define architectures here
      if: ${{ github.ref }} != 'master' && ${{ github.ref }} != 'development'
      env:
        BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Download build artifact
          uses: actions/download-artifact@v4
          with:
            name: production-artifacts-${{matrix.goarch}}
            merge-multiple: true

        - name: Set up Docker Build
          uses: docker/setup-buildx-action@v3

        - name: Login to Docker Registry
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: Build and push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/kubevoyage:${{ env.BRANCH_NAME }}
            platforms: linux/${{ matrix.goarch }}
            build-args: |
              TARGETARCH=${{ matrix.goarch }}
  helm-release:
    needs: build-docker
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: deploy/charts
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          registryImage: ${{ secrets.DOCKERHUB_USERNAME }}/kubevoyage
          imageTag: ${{ github.head_ref || github.ref_name }}
          CR_TOKEN: ${{ secrets.PAT }}
